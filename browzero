#!/usr/bin/env python3

import os
import sys
import re
import shutil
from PyQt5.QtCore import QUrl, QRect, QPoint, QSize, QByteArray, Qt, QSettings
from PyQt5.QtWidgets import QApplication, QMainWindow, QMenu, QAction, QDialog, QVBoxLayout, QLabel, QCheckBox, QPushButton, QDialogButtonBox, QMessageBox, QHBoxLayout, QInputDialog
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtWebEngineCore import QWebEngineUrlRequestInterceptor, QWebEngineUrlRequestInfo


class NetworkSelectionDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)

        self.setWindowTitle("Select Allowed Networks")
        layout = QVBoxLayout()

        self.checkboxes = []
        for network, _ in NetworkInterceptor.ALLOWED_NETWORKS:
            checkbox = QCheckBox(network, self)
            checkbox.stateChanged.connect(self.update_submit_button)
            self.checkboxes.append(checkbox)
            layout.addWidget(checkbox)

        self.submit_button = QPushButton("Submit", self)
        self.submit_button.clicked.connect(self.accept)
        self.submit_button.setEnabled(False)  # Disable the button initially
        layout.addWidget(self.submit_button)

        self.setLayout(layout)

        # Set a minimum width for the dialog
        self.setMinimumWidth(200)

    def update_submit_button(self):
        at_least_one_checked = any(checkbox.isChecked() for checkbox in self.checkboxes)
        self.submit_button.setEnabled(at_least_one_checked)


class NetworkInterceptor(QWebEngineUrlRequestInterceptor):
    ALLOWED_NETWORKS = [
        ("ZeroNet", r"(http|ws)://127\.0\.0\.1:43110/.*"),
        ("Yggdrasil", r"http://\[.*:.*:.*:.*:.*:.*:.*:.*\].*"),
        ("IPFS", r"http://.*\.(ipfs|ipns)\.localhost:8080/.*"),
        ("Tor", r"https?://.*\.onion.*"),
        ("Lokinet", r"https?://.*\.loki/.*"),
        ("Freenet", r"http://127\.0\.0\.1:8888/.*"),
        ("Tahoe-LAFS", r"http://localhost:3456/uri/.*"),
        ("GNUnet", r"http://localhost:7776/.*"),
        ("I2P", r"http://.*\.i2p/.*"),
    ]

    def __init__(self, allowed_networks=None):
        super().__init__()
        if allowed_networks is not None:
            self.set_allowed_networks(allowed_networks)

    def interceptRequest(self, info: QWebEngineUrlRequestInfo):
        url = info.requestUrl().toString()
        if not self.verify_url(url):
            info.block(True)

    def verify_url(self, url):
        url_patterns = [network[1] for network in self.ALLOWED_NETWORKS]
        pattern = "|".join(url_patterns)
        return bool(re.match(pattern, url))

    def get_allowed_networks(self):
        return [network[0] for network in self.ALLOWED_NETWORKS]

    def set_allowed_networks(self, allowed_networks):
        self.ALLOWED_NETWORKS = [net for net in NetworkInterceptor.ALLOWED_NETWORKS if net[0] in allowed_networks]


class browzero(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("browzero")

        # Load last saved geometry from QSettings
        settings = QSettings("browzero", "browzero")
        last_geometry = settings.value("geometry", QByteArray())
        if not last_geometry.isEmpty():
            self.restoreGeometry(last_geometry)
        else:
            screen_resolution = QApplication.desktop().screenGeometry()
            width, height = screen_resolution.width(), screen_resolution.height()
            self.setGeometry(0, 0, width, height)

        self.view = QWebEngineView()
        self.view.loadFinished.connect(self.handle_load_finished)

        self.setCentralWidget(self.view)

        # Add network interceptor
        self.interceptor = NetworkInterceptor()
        self.view.page().setUrlRequestInterceptor(self.interceptor)

        # Add context menu
        self.context_menu = QMenu(self)
        self.back_action = QAction("Back", self)
        self.back_action.triggered.connect(self.view.back)
        self.context_menu.addAction(self.back_action)
        self.forward_action = QAction("Forward", self)
        self.forward_action.triggered.connect(self.view.forward)
        self.context_menu.addAction(self.forward_action)
        self.reload_action = QAction("Reload", self)
        self.reload_action.triggered.connect(self.view.reload)
        self.context_menu.addAction(self.reload_action)
        self.home_action = QAction("Home", self)
        self.home_action.triggered.connect(self.go_home)
        self.context_menu.addAction(self.home_action)
        self.clear_data_action = QAction("Clear All Data", self)
        self.clear_data_action.triggered.connect(self.confirm_clear_all_data)
        self.context_menu.addAction(self.clear_data_action)
        self.networks_action = QAction("Networks", self)
        self.networks_action.triggered.connect(self.show_network_selection_dialog)
        self.context_menu.addAction(self.networks_action)
        self.navigate_action = QAction("Navigate to...", self)
        self.navigate_action.triggered.connect(self.show_address_bar)
        self.context_menu.addAction(self.navigate_action)
        self.view.setContextMenuPolicy(Qt.CustomContextMenu)
        self.view.customContextMenuRequested.connect(self.show_context_menu)
        self.quit_action = QAction("Quit", self)
        self.quit_action.triggered.connect(self.quit_application)
        self.context_menu.addAction(self.quit_action)

    def handle_load_finished(self):
        url = self.view.url().toString()
        if self.interceptor.verify_url(url):
            # Save current window geometry to QSettings
            settings = QSettings("browzero", "browzero")
            
            # Save only the x position and width of the window
            settings.setValue("geometry_x", self.geometry().x())
            settings.setValue("geometry_width", self.geometry().width())

            # Restore the saved height and y position
            screen_resolution = QApplication.desktop().screenGeometry()
            height = screen_resolution.height()
            settings.setValue("geometry_height", height)
            settings.setValue("geometry_y", 0)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_F11:
            if self.isFullScreen():
                self.showNormal()
            else:
                self.showFullScreen()
        else:
            super().keyPressEvent(event)

    def show_context_menu(self, pos):
        self.context_menu.exec_(self.view.mapToGlobal(pos))

    def go_home(self):
        self.view.load(QUrl("http://127.0.0.1:43110/"))

    def clear_all_data(self):
        # Clear all browsing data
        self.view.page().profile().clearAllVisitedLinks()
        self.view.page().profile().clearHttpCache()
        self.view.page().profile().cookieStore().deleteAllCookies()
        self.clear_local_storage()

    def confirm_clear_all_data(self):
        clear_confirmation = QMessageBox(self)
        clear_confirmation.setWindowTitle("Confirm Clear All Data")
        clear_confirmation.setText("Are you sure you want to clear all data?")
        
        # Remove standard buttons
        clear_confirmation.setStandardButtons(QMessageBox.NoButton)
        
        # Create custom buttons and layout
        no_button = QPushButton("No", clear_confirmation)
        yes_button = QPushButton("Yes", clear_confirmation)
        
        no_button.clicked.connect(lambda: clear_confirmation.done(QMessageBox.No))
        yes_button.clicked.connect(lambda: clear_confirmation.done(QMessageBox.Yes))

        button_layout = QHBoxLayout()
        button_layout.addWidget(no_button)
        button_layout.addStretch(1)
        button_layout.addWidget(yes_button)
        
        clear_confirmation.layout().addLayout(button_layout, 3, 0, 1, -1)

        user_choice = clear_confirmation.exec_()

        if user_choice == QMessageBox.Yes:
            self.clear_all_data()  # Call the clear_all_data method here
            self.context_menu.hide()  # Hide the context menu after clearing data

    def clear_local_storage(self):
        # Clear local storage by navigating to a blank page
        self.view.page().profile().clearAllVisitedLinks()
        self.view.page().profile().clearHttpCache()
        self.view.page().profile().cookieStore().deleteAllCookies()

        # Clear local storage using JavaScript
        self.view.page().runJavaScript("window.localStorage.clear();")

    def show_network_selection_dialog(self):
        allowed_networks = self.select_allowed_networks()
        self.interceptor.set_allowed_networks(allowed_networks)

    def show_network_selection_dialog(self):
        network_selection_dialog = NetworkSelectionDialog(self)
        if network_selection_dialog.exec_() == QDialog.Accepted:
            allowed_networks = [checkbox.text() for checkbox in network_selection_dialog.checkboxes if checkbox.isChecked()]
            self.interceptor.set_allowed_networks(allowed_networks)

    def show_address_bar(self):
        current_url = self.view.url().toString()

        # Create a custom QInputDialog instance
        dialog = QInputDialog(self)
        dialog.setWindowTitle("Navigate to...")
        dialog.setLabelText("Enter URL:")
        dialog.setTextValue(current_url)
        dialog.setInputMode(QInputDialog.TextInput)

        # Set the width to the same width as the browser window
        window_width = self.width()
        dialog.resize(window_width, dialog.height())

        # Show the dialog and get the result
        result = dialog.exec_()
        url = dialog.textValue()

        if result == QDialog.Accepted and url:
            self.view.load(QUrl(url))

    def quit_application(self):
        quit_confirmation = QMessageBox(self)
        quit_confirmation.setWindowTitle("Confirm Quit")
        quit_confirmation.setText("Are you sure you want to quit browzero?")
        
        # Remove standard buttons
        quit_confirmation.setStandardButtons(QMessageBox.NoButton)
        
        # Create custom buttons and layout
        no_button = QPushButton("No", quit_confirmation)
        yes_button = QPushButton("Yes", quit_confirmation)
        
        no_button.clicked.connect(lambda: quit_confirmation.done(QMessageBox.No))
        yes_button.clicked.connect(lambda: quit_confirmation.done(QMessageBox.Yes))

        button_layout = QHBoxLayout()
        button_layout.addWidget(no_button)
        button_layout.addStretch(1)
        button_layout.addWidget(yes_button)
        
        quit_confirmation.layout().addLayout(button_layout, 3, 0, 1, -1)

        user_choice = quit_confirmation.exec_()

        if user_choice == QMessageBox.Yes:
            QApplication.quit()


def main():
    app = QApplication(sys.argv)
    window = browzero()

    # Show network selection dialog
    network_selection_dialog = NetworkSelectionDialog(window)
    if network_selection_dialog.exec_() == QDialog.Accepted:
        allowed_networks = [checkbox.text() for checkbox in network_selection_dialog.checkboxes if checkbox.isChecked()]

        # Initialize network interceptor with selected networks
        window.interceptor = NetworkInterceptor(allowed_networks)
        window.view.page().setUrlRequestInterceptor(window.interceptor)

        # Load last saved site from QSettings
        settings = QSettings("browzero", "browzero")
        last_site = settings.value("last_site", "http://127.0.0.1:43110/")
        window.view.load(QUrl(last_site))

        # Restore the saved geometry
        settings = QSettings("browzero", "browzero")
        last_x = settings.value("geometry_x", 0)
        last_width = settings.value("geometry_width", QApplication.desktop().screenGeometry().width())
        last_height = settings.value("geometry_height", QApplication.desktop().screenGeometry().height())
        last_y = settings.value("geometry_y", 0)
        window.setGeometry(int(last_x), int(last_y), int(last_width), int(last_height))

        # If fullscreen is not desired on startup, remove the following line
        window.setWindowState(window.windowState() | Qt.WindowFullScreen)

        # Add the missing show() call
        window.show()

        sys.exit(app.exec_())
    else:
        sys.exit(0)  # Exit the application if the network selection dialog is closed without selection

if __name__ == "__main__":
    main()